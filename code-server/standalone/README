Please read this carefully before setting up the code-generator.

code_generator can be used to generate code using CHiLL. 
CHiLL and its components can be downloaded from (www.cs.utah.edu/~chunchen)

The code_generator is designed to take advantage of the available free
machines to do a distributed code generation.

The script "setup_code_gen_hosts.sh" must be in the working directory
of the master code-server.  It will be called automatically at the
beginning of a harmonization session to initialize the work directories
on the slave code-generator machines.

The work directories on the slave code-generator are populated with the
required files for code-generation.  Information on how to specify which
files are required is provided below.

To use the code_generator:

  1) Make sure the Harmony server's configuration file has the
     following key definitions:

        codegen
        codegen_host
        codegen_path
        codegen_flag_host
        codegen_flag_dir
        codegen_code_host
        codegen_code_dir
        codegen_slave_list
        codegen_slave_dir

     Explinations and examples for these keys can be found in the sample
     harmony.cfg provided with this distribution.

  2) Compile the code_generator binary via: `make all`

Lets assume the code_generator is installed in <code_generator> directory.
Assume we want to generate code for gemm (matrix multiplication):

First create a directory called "gemm" within the <code_generator> directory.
Copy all files from <code_generator>/generic to gemm directory. Rename the 
chill_script.generic.sh to chill_script.gemm.sh

Files that need to be changed:

  generate_temp_script.sh
    This file takes the code transformation parameters as arguments and
    creates a chill script (named temp.script).

  code.properties
    This file defines some global environment variables. The appname has
    to match the name of the directory (in this case gemm). Other changes
    that needs to made are documented in the file itself.

  required_files.dat
    This file lists all the files are needed by CHiLL to generate code.
    These files include SUIF intermediate files, a default file (needed
    in case CHiLL cannot generate code for the provided transformation
    parameters), code.properties, etc. More information can be found on
    the generic code.properties file itself.

Files that need to be created:

  gemm.[fc]
    Depending on if your target application is Fortran or C based.

  gemm_default.f
    This can be a copy of gemm.f

  gemm.sp2
    SUIF intermediate file: you can create this using chill_runner_f.sh.
    The runner script takes the appname (in this case gemm) as an argument
    and creates the intermediate files.

Things to remember:

  1) We assume that password-less login have been setup between the master
     and slave code-generators (and vice-versa).  This can be done via public
     key authentication (eg. ssh-keygen).

  2) We assume that CHiLL and its components are installed in $HOME.
     More specifically, we assume CHiLL is installed in $HOME/CHiLL,
     Omega plus is installed in $HOME/omega and SUIF is installed in
     $HOME/suifhome.

To launch the code_generator:
  % ./code_generator <codegen_path>

Steps to run the code generator with example gemm application:

  These instructions are provided in code-server/standalone/README of
  the Active Harmony distribution.

  1) Working with code generator files

    a) Create a 'gemm' directory within the 'standalone' directory.
    b) Copy all files from 'code-server/standalone/generic'
       to the 'gemm' directory you created in step 1a.
    c) Rename chill_script.generic.sh to chill_script.gemm.sh
    d) Following files that are needed to be changed under 'gemm'

      i) generate_temp_script.sh (Used to specify the tunable parameters)
     ii) code.properties (Used to specify the PATH variables and appname)
    iii) required_files.dat (List of files necessary for slave code-server)
     iv) gemm.f or gemm.c
      v) gemm_default.f
     vi) gemm.sp2
    vii) generator_hosts_gemm

  2) Launching the code generator

    # ./code_generator <codegen_path>

     For example, "./code_generator $HOME/codegen/flags"

Additional Details
  Let us assume that we will launch 6 slave code-generators on "armour"
  and 3 slave code-generators on "maxfli" from the master code-generator
  on "spoon".  The code should be sent to "brood00" when complete, and
  the harmony server (also on "brood00") should be informed when new code
  is ready.

  Follow these steps for running the code_generator:

    1) The harmony configuration should have the following directives:
        codegen=Standalone
        codegen_host=maxfli
        codegen_path=/home/username/scratch/confs
        codegen_flag_host=brood00
        codegen_flag_dir=/scratch0/username/flags
        codegen_code_host=brood00
        codegen_code_dir=/scratch0/username/code
        codegen_slave_list=armour 6, maxfli 3
        codegen_slave_dir=/tmp/codegen

    2) In this example, we use to generate code for matrix multiplication,
       the directory "gemm" has to be created within "standalone" directory.
       Now copy all the files from "generic" directory to "gemm" directory.

    3) Rename "chill_script.generic.sh" to "chill_script.gemm.sh"

    4) In the "code.properties" file which is available under "gemm"
       directory, do the following to change the PATH variables.  Since
       the host machine is "brood00" change the following paths.

         export OMEGA_P=$HOME/omega
         export SUIFHOME=$HOME/suifhome
         export PATH=$HOME/chill/bin:${SUIFHOME}/i386-linux/bin/:${PATH}
         export LD_LIBRARY_PATH=${SUIFHOME}/i386-linux/solib:${LD_LIBRARY_PATH}

       Also, change the following "appname = gemm"

       Based on what file we are going to use (either a c or fortran) the
       following field is set accordingly. In this example, fortran is used.

         file_suffix=f

    5) Make sure the code_generator binary is up to date:
  
        make clean
        make

Important point to note:  There is no relation as to which one to run first 
(either code_generator or hserver).  They both have to be ready and running
before the application starts.

    6) To run the code generator, execute it inside the "standalone" directory.

        ./code_generator /home/username/scratch/confs

    7) Open a new terminal and ssh into "brood00".  From now on, we show
       how to run PRO example.  Under "pro_init_generic.tcl" make sure the
       "space dimension" is set to "5" and "npoints" is set to atleast "7".

    8) After that do the following for the changes to become effective 

        cd build
        make clean
        make

    9) For running the "hserver" with PRO example do the following

        cd bin
        gdb ./hserver
        (Now at (gdb) prompt, type "run")

   10) Open another terminal and ssh into "brood00" and then change the
       directory to the "pro_example" folder:

        cd example/parallel/pro_example

   11) Define the following environment variables:

        HARMONY_S_HOST=brood00
        HARMONY_S_PORT=1977

   12) Do the following

        qsub -IV -lnodes=bug21+bug22+bug23+bug24+.....+bug29

   13) After the above step, type "lamboot"

   14) Then do the following at the bash prompt

        cd example/parallel/pro_example

   15) For running the parallel examples, do the following

        mpirun -np 8 ./pro_example &

    This runs the "pro_example" for the code generation part.
