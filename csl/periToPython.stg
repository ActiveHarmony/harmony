group periToPython;

start(name, body) ::= <<
# import the python contraint module
from constraint import *

<name>=Problem()

<body; separator="\n">

>>

/*-------------------------------------------------*/
/*                   BODY                          */
/*-------------------------------------------------*/

body(pname, constDecls, codeRegions, regionSets, paramDecls, 
		constraintDecls, specDecl) ::= <<
<! 
    Check to see what components of PERI CSL are
    defined
!>

<if(constDecls)>
# Constant Declarations
<constDecls; separator="\n">
<endif>

<if(codeRegions)>
# Code Region Declarations
<codeRegions; separator="\n">
<endif>

<if(regionSets)>
# Region Set Declarations
<regionSets; separator="\n">
<endif>

<! At least one parameter is always defined !>
# parameter Declarations
<paramDecls; separator="\n">

<if(constraintDecls)>
# Constraint Declarations
<constraintDecls; separator="\n">
<endif>

<if(specDecl)>
# Specification
<specDecl; separator="\n">
<endif>


# format the output and print solutions
solution = <pname>.getSolution()

# print the label
keys=solution.keys()
keyLabel = ''
for key in keys:
    keyLabel +=  key + '\t'

print keyLabel

solutions=<pname>.getSolutions()

for solution in solutions:
    oneLine = ''
    for key in keys:
        oneLine +=  str(solution[key]) + '\t'
    print oneLine
>>

/* ------------------------------------------------- */
/*                   CONSTANTS                       */
/* ------------------------------------------------- */

/* Constant declaration */
cDecl(type, name, val) ::= <<

# type:: <type>
<name>=<val>

>>

/* ------------------------------------------------- */
/*                   CODE REGIONS                    */
/* ------------------------------------------------- */
/* For python constraint module, we do not have to do anything
    upon seeing a code region. This template serves the purpose
    just showing how one can access the code region declarations
*/
codeRegion(name) ::= <<

# code region <name> is defined
>>

/* ------------------------------------------------- */
/*                   REGION SETS                     */
/* ------------------------------------------------- */
/* Same reasoning as code region
*/
regionSet(name, lst) ::= <<

# regionSet <name> is defined
#  elems: [<lst; separator=", ">]

>>

/* ------------------------------------------------- */
/*                   PARAMETERS                      */
/* ------------------------------------------------- */

/* For range parameter declaration we can either grab the
    domain values enumerated by the parser or use the range
    construct in the target language.
*/
/*
    Argument parameter is an object with accessor methods
    for: problemName (search space name)
         name (name of this parameter)
         type 
         domain (a vector of permissible values)
         regionSet (an Object with codeRegions attribute)
         default.
    Each of these attributes can be accessed using the 
    following constuct: <parameter.attribute> (for ex:
        <parameter.name> returns the name of the
        parameter.
*/
pDecl(parameter,type,domain,def,regSpec,builtIn) ::= <<
<! we will define each parameter as a python class !>
class <parameter.name>:
    <def>
    def values(self):
        <if(builtIn)>
        ls=[<parameter.domain.values; separator=",">]
        <else>
        ls=[]
        <domain>
        <endif>
        return ls

<! Check to see if regSpec is defined. If it is defined
    then we need to add one variable for each of the code
    regions defined in the region set.
    Otherwise, we simply add this variable to the problem.
!>
<if(!regSpec)>
<parameter.problemName>.addVariable("<parameter.name>",<parameter.name>().values())
<else>
<regSpec>
<parameter.codeRegions: addVar(param=parameter.name, pname=parameter.problemName)>
<endif>
>>

addVar(param, pname) ::= <<
<pname>.addVariable("<it>_<param>", <param>().values())

>>


/* ------------------------------------------------- */
/*                   DEFAULT VALS                    */
/* ------------------------------------------------- */
defDecl(type, val) ::= <<
<!# If needed, the type of this param is <type>!>
default=<val>
>>


/* ------------------------------------------------- */
/*                   REGION ASSOC                    */
/* ------------------------------------------------- */
regionSpec(name) ::= <<
# Region Set association: <name>
>>

/* ------------------------------------------------- */
/*                   RANGES & ARRAYS                 */
/* ------------------------------------------------- */
rangePInt(min, max, base) ::= <<
for i in range(<min>,<max>):
    ls.append(pow(<base>,i))
>>

rangePFloat(min, max, base) ::= <<
for i in range(<min>,<max>:
    ls.append(pow(<base>,i))
>>

rangeInt(min, max, step) ::= <<
<if(step)>
ls=range(<min>, <max>, <step>)
<else>
ls=range(<min>,<max>)
<endif>
>>

rangeFloat(min, max, step) ::= <<
<if(step)>
ls=range(<min>, <max>, <step>)
<else>
ls=range(<min>,<max>)
<endif>
>>

arr(vals) ::= <<
ls=[ <vals; separator=", "> ]
>>


/* ------------------------------------------------- */
/*                   CONSTRAINTS                     */
/* ------------------------------------------------- */

constraint(constrObject, ex, spec) ::= <<
def <constrObject.name> (<constrObject.arguments; separator=",">):
    return <ex>

<if(!spec)>
<constrObject.problemName>.addConstraint(FunctionConstraint(<constrObject.name>), \
("<constrObject.arguments; separator="\",\"">"))
<endif>

>>

/* ------------------------------------------------- */
/*                   EXPRESSIONS                     */
/* ------------------------------------------------- */

orExpr(expr1, expr2) ::= <<
(<expr1> or <expr2>)
>>

andExpr(expr1, expr2) ::= <<
(<expr1> and <expr2>)
>>

equalsExpr(expr1, expr2) ::= <<
(<expr1> == <expr2>)
>>

notEqualsExpr(expr1, expr2) ::= <<
(<expr1> != <expr2>)
>>

lessThanExpr(expr1, expr2) ::= <<
(<expr1> \< <expr2>)
>>

lessThanEqualsExpr(expr1, expr2) ::= <<
(<expr1> \<= <expr2>)
>>

greaterThanExpr(expr1, expr2) ::= <<
(<expr1> > <expr2>)
>>

greaterThanEqualsExpr(expr1, expr2) ::= <<
(<expr1> \>= <expr2>)
>>

plusExpr(expr1, expr2) ::= <<
(<expr1> + <expr2>)
>>

minusExpr(expr1, expr2) ::= <<
(<expr1> - <expr2>)
>>

multExpr(expr1, expr2) ::= <<
(<expr1> * <expr2>)
>>

divExpr(expr1, expr2) ::= <<
(<expr1> / <expr2>)
>>

modExpr(expr1, expr2) ::= <<
(<expr1> % <expr2>)
>>

powExpr(expr1, expr2) ::= <<
pow(<expr1>,<expr2>)
>>

notExpr(expr1) ::= <<
(not <expr1>)
>>

/* revisit this later */
negateExpr(expr) ::= <<
(~ <expr>)
>>

/* ------------------------------------------------- */
/*                   SPECIFICATION                   */
/* ------------------------------------------------- */
specification(spec, expr)::= <<
def specification (<spec.arguments; separator=",">):
    return <expr>

<spec.problemName>.addConstraint(FunctionConstraint(specification), \
("<spec.arguments; separator="\",\"">"))

>>

constraintCall(c) ::= <<
<c.name>(<c.arguments;separator=", ">)
>>

specOrExpr(expr1, expr2) ::= <<
(<expr1> or <expr2>)
>>

specAndExpr(expr1, expr2) ::= <<
(<expr1> and <expr2>)
>>

/* ------------------------------------------------- */
/*                   TYPES                           */
/* ------------------------------------------------- */

intTypeDecl(type)::= <<
int
>>

floatTypeDecl(type)::= <<
float
>>

stringTypeDecl(type)::= <<
string
>>

boolTypeDecl(type)::= <<
bool
>>

mixedTypeDecl(type)::= <<
mixed
>>

/* ------------------------------------------------- */
/*                   PARAM REFS                      */
/* ------------------------------------------------- */

regionRef(region, param) ::= <<
<region>_<param>
>>

paramRef(name) ::= <<
<name>
>>

/* ------------------------------------------------- */
/*                   PRIMITIVES                      */
/* ------------------------------------------------- */
intVal(integer) ::= "<integer>"
floatVal(float) ::= "<float>"
boolFVal(bool) ::= "False"
boolTVal(bool) ::= "True"
strVal(str) ::= <<
<str>
>>
