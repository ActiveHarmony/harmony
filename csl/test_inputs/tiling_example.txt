search space tiling_mm {
      
      # Naive MM code
      # DO K = 1,N
      #  DO J = 1,N
      #   DO I = 1,N
      #    C[I,J] = C[I,J] + A[I,K] * B[K,J]

      # Now defining the search space specifics for tiling and unrolling

      # define some constants
      constants {
        int l1_cache=128;
        int l2_cache=4096;
        int register_file_size=16;
      }      

      # code region declarations: loopI, loopJ, loopK
      code_region loopI;
      code_region loopJ;
      code_region loopK;

      # region set declaration
      region_set loop [loopI, loopJ, loopK];

      # declare tile_size parameter and associate the parameter to region
      #  set loop. default value of the parameter is set to 32.
      parameter tile int {
        # prange -> power range [min:max:base]
		prange [1:8:2];
        # 2^1, 2^2, ..., 2^8
        default 32;
        region loop;
      }

      # declare unroll_factor parameter and associate the parameter to
      #  region set loop. default unroll factor is set to 1.
      parameter unroll int {
        range [1:8:2];
        default 1;
        region loop;
      }

      # L1 cache (for array B)
      constraint mm_l1 {
		loopK.tile * loopJ.tile <= (l1_cache*1024)/16;
      }
      # L2 cache (for array A)
      constraint mm_l2 {
        loopK.tile * loopI.tile <= (l2_cache*1024)/16;
      }

      # unroll constraint
      constraint mm_unroll {
        (loopI.unroll * loopJ.unroll * loopK.unroll) <= register_file_size;
      }

      # putting everything together
      specification {
		 mm_l1 && mm_l2 && mm_unroll;
      }
      
}


