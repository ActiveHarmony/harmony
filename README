This file contains a description of the files that are comprised in this
directory. It has a short description of each file, but it does not
get into details of implementation, as this is (or should be!) done in
each file.

The current supported platform is Linux only.

* ===================
* Directory Structure
* ===================

bin/     : executables
doc/     : documentation
example/ : several demo examples
nb/      : knowledge base source files used by library specification layer
tcl/     : Tcl scripts used by the h_server (this is where all the
           search algorithms are implemented)
build/   : source files
java/    : Java Harmony API

* =============
* Notable Files
* =============

bin/harmony.cfg - This is the global configuration file.  All runtime
                  customization such as code server type, or search
                  algorithm selection, should be made in this file.
build/hglobal_config.c - the implementation of the Global Configuration file
build/hglobal_config.h - function prototypes for global configuration file and
                         other definitions
build/hclient.c - the implementation of the API functions of Harmony
build/hclient.h - prototypes of the API functions
build/hconfig.tcl - the tcl script that loads the functions that parse the RSL
                    and take care of the tk interface
build/hdb.h - classes that are supposed to be used by the server to store
              information about clients and nodes registered with the system.
build/hmesgs.c - the implementation of functions that pack/unpack
                 (serialize/deserialize) messages
build/hmesgs.h - the definition of message classes.
build/hserver.c - the implementation of the Harmony server
build/hserver.h - function prototypes for harmony server and other definitions
build/lsl_config.h - please modify this to the appropriate directory
build/scan.l and build/grammar.y - specify the syntax for the library
                                   specification language
build/libcreater.c - the implementation of the library specification language
                     precompiler
build/template.* - template data file used by libcreater

Next, a few pointers on how to compile the code and run the example.

just do a:

        $ cd build
        $ make

This will build the harmony server and the libcreater for you 

        $ cd ../bin
        $ ls
        hconfig.tcl  hserver  libcreater

To extract the variable values from the global_config file you have to setup
the path to the file as an environment variable.

The HARMONY_CONFIG environment variable can be used to specify which
configuration file to use.  For example:

        $ HARMONY_CONFIG=$HOME/activeharmony/build/harmony.cfg

To run the server:
        $ ./hserver [configuration_file]

To run the example client you have to setup the environment variables:

at sh:
        $ export HARMONY_S_HOST=localhost
        $ export HARMONY_S_PORT=1977

at csh:
        $ setenv HARMONY_S_HOST localhost
        $ setenv HARMONY_S_PORT 1977

Of course, "localhost" is put just for demo purposes. You should set that
variable to whatever hostname the server is running on. However, the port
has to be 1977. Maybe in future versions the port number will be hardcoded
in the client code.

We provide a set of examples:
To build and run the example client:

        $ cd ../example/sequential/c++_examples/example2/
        $ make

Before running the example, make sure to check the hconfig.tcl file in bin
directory. The hconfig.tcl file should include correct pro init file. For
this example, you can put pro_init_generic.tcl in the load list.
Check the pro_init_generic file to make sure that the parameters are set
correctly. In particular, check the space_dimension and simplex_npoints
parameters. For this example, the space dimension is 2 (x and y parameters).

        set space_dimension 2
        # simplex size
        set simplex_npoints 8

Since the simplex_npoints is 8, harmony expects eight clients. So to run the
example, you can do one of the following:

        $ for i in $(seq 1 1 8); do ./example& done
OR
        $ mpiexec -np 8 ./example

Look in the example/ directory for other examples to try.
