ifndef TO_BASE
    $(error Makefile does not define TO_BASE variables.)
endif

#
# Variables that control the build system.
#
.DEFAULT_GOAL=all

prefix=$(realpath .)/$(TO_BASE)
exec_prefix=$(prefix)
bindir=$(exec_prefix)/bin
libdir=$(exec_prefix)/lib
libexecdir=$(exec_prefix)/libexec
includedir=$(prefix)/include
TGTS=$(BIN_TGTS) $(LIB_TGTS) $(INCLUDE_TGTS) $(LIBEXEC_TGTS) $(NO_INST_TGTS)

ifeq (GCC, $(findstring GCC,$(shell $(CC) --version 2>&1)))
    override CFLAGS+=-std=c99
else
    override CFLAGS+=-c99
endif

ifeq ($(DEBUG), 1)
    override CFLAGS+=-g
    override CXXFLAGS+=-g
else
    override CFLAGS+=-O2
    override CXXFLAGS+=-O2
endif

ifeq ($(STRICT), 1)
    override CFLAGS+=-Wpedantic -Wall -Werror
    override CXXFLAGS+=-Wpedantic -Wall -Werror
endif

#
# Standard rules to make available in all subsystems.
#
.PHONY: all \
        clean \
        distclean \
        install \
        subdirs \
        $(SUBDIRS) \
        $(TO_BASE)/src/libharmony.a

all: $(TGTS) subdirs

_BIN_DIRS=$(addprefix $(DESTDIR)$(bindir)/, $(dir $(BIN_TGTS))) \
          $(addprefix $(DESTDIR)$(bindir)/, $(dir $(BIN_COPY)))
_LIB_DIRS=$(addprefix $(DESTDIR)$(libdir)/, $(dir $(LIB_TGTS))) \
          $(addprefix $(DESTDIR)$(libdir)/, $(dir $(LIB_COPY)))
_LIBEXEC_DIRS=$(addprefix $(DESTDIR)$(libexecdir)/, $(dir $(LIBEXEC_TGTS))) \
              $(addprefix $(DESTDIR)$(libexecdir)/, $(dir $(LIBEXEC_COPY)))
_INCLUDE_DIRS=$(addprefix $(DESTDIR)$(includedir)/, $(dir $(INCLUDE_TGTS))) \
              $(addprefix $(DESTDIR)$(includedir)/, $(dir $(INCLUDE_COPY)))
install: all
	@if [ -n "$(BIN_TGTS)" -o -n "$(BIN_COPY)" ]; then \
	    echo mkdir -p $(sort $(_BIN_DIRS)) && \
	         mkdir -p $(sort $(_BIN_DIRS)) && \
	    for i in $(BIN_TGTS); do \
	        echo cp $$i $(DESTDIR)$(bindir)/$$i && \
	             cp $$i $(DESTDIR)$(bindir)/$$i; \
	    done && \
	    for i in $(BIN_COPY); do \
	        echo cp $$i $(DESTDIR)$(bindir)/$$i && \
	             cp $$i $(DESTDIR)$(bindir)/$$i; \
	    done; \
	fi

	@if [ -n "$(LIB_TGTS)" -o -n "$(LIB_COPY)" ]; then \
	    echo mkdir -p $(sort $(_LIB_DIRS)) && \
	         mkdir -p $(sort $(_LIB_DIRS)) && \
	    for i in $(LIB_TGTS); do \
	        echo cp $$i $(DESTDIR)$(libdir)/$$i && \
	             cp $$i $(DESTDIR)$(libdir)/$$i; \
	    done && \
	    for i in $(LIB_COPY); do \
	        echo cp $$i $(DESTDIR)$(libdir)/$$i && \
	             cp $$i $(DESTDIR)$(libdir)/$$i; \
	    done; \
	fi

	@if [ -n "$(LIBEXEC_TGTS)" -o -n "$(LIBEXEC_COPY)" ]; then \
	echo mkdir -p $(sort $(_LIBEXEC_DIRS)) && \
	     mkdir -p $(sort $(_LIBEXEC_DIRS)) && \
	    for i in $(LIBEXEC_TGTS); do \
	        echo cp $$i $(DESTDIR)$(libexecdir)/$$i && \
	             cp $$i $(DESTDIR)$(libexecdir)/$$i; \
	    done && \
	    for i in $(LIBEXEC_COPY); do \
	        echo cp $$i $(DESTDIR)$(libexecdir)/$$i && \
	             cp $$i $(DESTDIR)$(libexecdir)/$$i; \
	    done; \
	fi

	@if [ -n "$(INCLUDE_TGTS)" -o -n "$(INCLUDE_COPY)" ]; then \
	    echo mkdir -p $(sort $(_INCLUDE_DIRS)) && \
	         mkdir -p $(sort $(_INCLUDE_DIRS)) && \
	    for i in $(INCLUDE_TGTS); do \
	        echo cp $$i $(DESTDIR)$(includedir)/$$i && \
	             cp $$i $(DESTDIR)$(includedir)/$$i; \
	    done && \
	    for i in $(INCLUDE_COPY); do \
	        echo cp $$i $(DESTDIR)$(includedir)/$$i && \
	             cp $$i $(DESTDIR)$(includedir)/$$i; \
	    done; \
	fi

	@if [ -n "$(NO_INST_TGTS)" ]; then \
	    for i in $(NO_INST_TGTS); do \
	        echo "$$i must be executed from source directory (for now)."; \
	    done; \
	fi

clean: subdirs
	$(RM) core a.out *.o $(TGTS) $(EXTRA_CLEANUP)

distclean: clean
	$(RM) *~ *.d

subdirs: $(SUBDIRS)

$(SUBDIRS):
	$(MAKE) -C $@ $(MAKECMDGOALS)

$(TO_BASE)/src/libharmony.a:
	$(MAKE) -C $(TO_BASE)/src libharmony.a

#
# Auto dependency creation
#
%.d: %.c
	@$(RM) $@; \
	$(CC) -MM $(CPPFLAGS) $< > $@.$$$$ 2>/dev/null; \
	sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
	$(RM) $@.$$$$
-include $(patsubst %.c,%.d,$(filter %.c,$(SRCS)))

%.d: %.cxx
	@$(RM) $@; \
	$(CXX) -MM $(CPPFLAGS) $< > $@.$$$$ 2>/dev/null; \
	sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
	$(RM) $@.$$$$
-include $(patsubst %.cxx,%.d,$(filter %.cxx,$(SRCS)))
