c
c Copyright 2003-2011 Jeffrey K. Hollingsworth
c
c This file is part of Active Harmony.
c
c Active Harmony is free software: you can redistribute it and/or modify
c it under the terms of the GNU Lesser General Public License as published
c by the Free Software Foundation, either version 3 of the License, or
c (at your option) any later version.
c
c Active Harmony is distributed in the hope that it will be useful,
c but WITHOUT ANY WARRANTY; without even the implied warranty of
c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
c GNU Lesser General Public License for more details.
c
c You should have received a copy of the GNU Lesser General Public License
c along with Active Harmony.  If not, see <http://www.gnu.org/licenses/>.
c

c /* Generated by libcreater automatically */
c #ifndef _$1_H
c #define _$1_H

c /* user defined header */
$$

c #define $1_OK 1
	integer*4 $1_OK /1/
c #define $1_NO_SUCH_METHOD -100
	integer*4 $1_NO_SUCH_METHOD /-100/
c #define $1_NO_SUCH_METRIC -101
	integer*4 $1_NO_SUCH_METRIC /-101/
c #define $1_NO_SUCH_TRANSFORM -102
	integer*4 $1_NO_SUCH_TRANSFORM /-102/

c #define $1_NOMETHOD $2
	integer*4 $1_NOMETHOD /$2/
c #define $1_NOMETRIC $3
	integer*4 $1_NOMETRIC /$3/
c #define $1_NOPREDICATE $4
	integer*4 $1_NOPREDICATE /$4/
c #define $1_NOFUNC $5
	integer*4 $1_NOFUNC /$5/


c struct $1_metric {
c 
c         char *name;
c         char *datatype;
c 
c } ;

	structure /$1_metric/
		integer*4 name
		integer*4 datatype
	end structure

c 
c struct $1_cvtfrom{
c 
c 	//int fromid;
c 	char *cvtfuncname;
c 	char *cvtestfuncname;
c };

	structure /$1_cvtfrom/
		integer*4 cvtfuncname
		integer*4 cvtestfuncname
	end structure

c struct $1_mntest {
c 
c 	char *mntfuncname;
c 	char *estfuncname;
c
c };
	
	structure /$1_mntest/
		integer*4 mntfuncname
		integer*4 estfuncname
	end structure
 
c struct $1_interface {
c 
c 	char *funcname;
c };

	structure /$1_interface/
		integer*4 funcname
	end structure
 
c struct $1_method{
c 
c         //methodname name;
c         char *name;
c         char *libfilename;
c 	struct $1_cvtfrom *cvtfunc;
c 	struct $1_mntest *mntfunc;
c 	struct $1_interface *interfacefunc;
c 
c } ;

	structure /$1_method/
		integer*4 name
		integer*4 libfilename
		integer*4 cvtfunc
		integer*4 mntfunc
		integer*4 interfacefunc
	end structure

c /* common interface */
c void $1_init();
	external $1_init	!$PRAGMA C($1_init)

c void $1_final();
	external $1_final	!$PRAGMA C($1_final)

c int setmethod(char *method );
	external setmethod	!$PRAGMA C(setmethod)
	integer*4 setmethod

c int methodquery(void **table);
	external methodquery	!$PRAGMA C(methodquery)
	integer*4 methodquery

c int metricquery(void **table);
	external metricquery	!$PRAGMA C(metricquery)
	integer*4 metricquery

c int estimate(char *metric,char *method, void ** result);
	external estimate	!$PRAGMA C(estimate)
	integer*4 estimate

c int estimateconvert(char *target_method, void **result);
	external estimateconvert !$PRAGMA C(estimateconvert)
	integer*4 estimateconvert

c int measurement(char *metric, void **result);
	external measurement	!$PRAGMA C(measurement)
	integer*4 measurement

c char *methodconversionquery(char *method);
	external methodconversionquery	!$PRAGMA C(methodconversionquery)
	integer*4 methodconversionquery

c int updateresult();
	external updateresult	!$PRAGMA C(updateresult)
	integer*4 updateresult

c /* UpdateAttribute */
	external updateattribute !$PRAGMA C(updateattribute)
	character *(*)updateattribute

c /* library interfaces */
$$

c #endif
